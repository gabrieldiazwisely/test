{"ast":null,"code":"var _jsxFileName = \"/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/auth/withAuthorization.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withAuthorization(requirements, configs = {}) {\n  return function applyAuthFor(WrappableComponent) {\n    var _class, _temp;\n\n    return _temp = _class = class ComponentWithAuthorization extends Component {\n      render() {\n        const unauthorized = configs.unauthorized;\n        const _this$context = this.context,\n              user = _this$context.user,\n              authorize = _this$context.authorize;\n\n        if (user && user.isAuthed && authorize(requirements, user)) {\n          return /*#__PURE__*/React.createElement(WrappableComponent, Object.assign({}, this.props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        if (unauthorized) {\n          return unauthorized;\n        }\n\n        return null;\n      }\n\n    }, _class.contextTypes = {\n      user: PropTypes.object,\n      authorize: PropTypes.func,\n      loggedOutRole: PropTypes.oneOfType([PropTypes.string, PropTypes.symbol])\n    }, _temp;\n  };\n}\n\nexport { withAuthorization };","map":{"version":3,"sources":["/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/auth/withAuthorization.js"],"names":["React","Component","PropTypes","withAuthorization","requirements","configs","applyAuthFor","WrappableComponent","ComponentWithAuthorization","render","unauthorized","context","user","authorize","isAuthed","props","contextTypes","object","func","loggedOutRole","oneOfType","string","symbol"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,iBAAT,CAA2BC,YAA3B,EAAyCC,OAAO,GAAG,EAAnD,EAAuD;AACrD,SAAO,SAASC,YAAT,CAAsBC,kBAAtB,EAA0C;AAAA;;AAC/C,4BAAO,MAAMC,0BAAN,SAAyCP,SAAzC,CAAmD;AAMxDQ,MAAAA,MAAM,GAAG;AAAA,cACCC,YADD,GACkBL,OADlB,CACCK,YADD;AAAA,8BAEqB,KAAKC,OAF1B;AAAA,cAECC,IAFD,iBAECA,IAFD;AAAA,cAEOC,SAFP,iBAEOA,SAFP;;AAIP,YAAID,IAAI,IAAIA,IAAI,CAACE,QAAb,IAAyBD,SAAS,CAACT,YAAD,EAAeQ,IAAf,CAAtC,EAA4D;AAC1D,8BAAO,oBAAC,kBAAD,oBAAwB,KAAKG,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,YAAIL,YAAJ,EAAkB;AAChB,iBAAOA,YAAP;AACD;;AAED,eAAO,IAAP;AACD;;AAnBuD,KAA1D,SACSM,YADT,GACwB;AACpBJ,MAAAA,IAAI,EAAEV,SAAS,CAACe,MADI;AAEpBJ,MAAAA,SAAS,EAAEX,SAAS,CAACgB,IAFD;AAGpBC,MAAAA,aAAa,EAAEjB,SAAS,CAACkB,SAAV,CAAoB,CAAClB,SAAS,CAACmB,MAAX,EAAmBnB,SAAS,CAACoB,MAA7B,CAApB;AAHK,KADxB;AAqBD,GAtBD;AAuBD;;AAED,SAASnB,iBAAT","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nfunction withAuthorization(requirements, configs = {}) {\n  return function applyAuthFor(WrappableComponent) {\n    return class ComponentWithAuthorization extends Component {\n      static contextTypes = {\n        user: PropTypes.object,\n        authorize: PropTypes.func,\n        loggedOutRole: PropTypes.oneOfType([PropTypes.string, PropTypes.symbol])\n      }\n      render() {\n        const { unauthorized } = configs\n        const { user, authorize } = this.context\n\n        if (user && user.isAuthed && authorize(requirements, user)) {\n          return <WrappableComponent {...this.props} />\n        }\n\n        if (unauthorized) {\n          return unauthorized\n        }\n\n        return null\n      }\n    }\n  }\n}\n\nexport { withAuthorization }\n"]},"metadata":{},"sourceType":"module"}