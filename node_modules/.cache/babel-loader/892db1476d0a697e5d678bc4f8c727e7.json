{"ast":null,"code":"import _regeneratorRuntime from \"/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n2xx Success\n200 OK\n201 Created\n204 No Content\n\n4xx Client errors\n401 Unauthorized\n403 Forbidden\n404 Not Found\n412 Precondition Failed\n\n5xx Server errors\n500 Internal Server Error\n501 Not Implemented\n*/\nconst HTTP_SUCCESS_STATUSES = [200, 201, 204];\nconst HTTP_ERROR_STATUSES = [401, 403, 404, 412, 500, 501];\nconst DEFAULT_HEADERS = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n};\n\nclass HttpRequest {\n  static setup({\n    protocol = \"http\",\n    hostname = \"\",\n    port = 0,\n    headers = {}\n  }) {\n    this._protocol = protocol;\n    this._hostname = hostname;\n    this._port = port;\n    this._headers = Object.assign({}, headers, DEFAULT_HEADERS);\n  }\n\n  static request({\n    url = null,\n    method = \"POST\",\n    headers = {},\n    path = \"\",\n    body = {}\n  }) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var requestOptions, URL, res, data, error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            requestOptions = {\n              method: method,\n              mode: \"cors\",\n              headers: Object.assign({}, _this._headers, headers)\n            };\n\n            if (typeof body === \"object\" && Object.keys(body).length !== 0) {\n              requestOptions.body = JSON.stringify(body);\n            }\n\n            URL = url ? \"\".concat(url).concat(path) : \"\".concat(_this._protocol, \"://\").concat(_this._hostname, \":\").concat(_this._port).concat(path);\n            _context.next = 5;\n            return fetch(URL, requestOptions);\n\n          case 5:\n            res = _context.sent;\n            _context.prev = 6;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            data = _context.sent;\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](6);\n            data = [];\n\n          case 15:\n            if (!HTTP_SUCCESS_STATUSES.includes(res.status)) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.resolve({\n              status: res.status,\n              data\n            }));\n\n          case 19:\n            if (!HTTP_ERROR_STATUSES.includes(res.status)) {\n              _context.next = 25;\n              break;\n            }\n\n            error = new Error(data.message || \"Internal Server Error\");\n            error.status = res.status;\n            return _context.abrupt(\"return\", Promise.reject(error));\n\n          case 25:\n            throw new Error(\"Network response was not ok\");\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 12]]);\n    }))();\n  }\n\n}\n\nexport { HttpRequest };","map":{"version":3,"sources":["/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/helpers/httpRequest.js"],"names":["HTTP_SUCCESS_STATUSES","HTTP_ERROR_STATUSES","DEFAULT_HEADERS","Accept","HttpRequest","setup","protocol","hostname","port","headers","_protocol","_hostname","_port","_headers","Object","assign","request","url","method","path","body","requestOptions","mode","keys","length","JSON","stringify","URL","fetch","res","json","data","includes","status","Promise","resolve","error","Error","message","reject"],"mappings":"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","sourcesContent":["/*\n2xx Success\n200 OK\n201 Created\n204 No Content\n\n4xx Client errors\n401 Unauthorized\n403 Forbidden\n404 Not Found\n412 Precondition Failed\n\n5xx Server errors\n500 Internal Server Error\n501 Not Implemented\n*/\nconst HTTP_SUCCESS_STATUSES = [200, 201, 204];\nconst HTTP_ERROR_STATUSES = [401, 403, 404, 412, 500, 501];\nconst DEFAULT_HEADERS = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n};\n\nclass HttpRequest {\n  static setup({ protocol = \"http\", hostname = \"\", port = 0, headers = {} }) {\n    this._protocol = protocol;\n    this._hostname = hostname;\n    this._port = port;\n    this._headers = Object.assign({}, headers, DEFAULT_HEADERS);\n  }\n\n  static async request({\n    url = null,\n    method = \"POST\",\n    headers = {},\n    path = \"\",\n    body = {}\n  }) {\n    const requestOptions = {\n      method: method,\n      mode: \"cors\",\n      headers: Object.assign({}, this._headers, headers)\n    };\n    if (typeof body === \"object\" && Object.keys(body).length !== 0) {\n      requestOptions.body = JSON.stringify(body);\n    }\n    const URL = url\n      ? `${url}${path}`\n      : `${this._protocol}://${this._hostname}:${this._port}${path}`;\n    const res = await fetch(URL, requestOptions);\n    let data;\n    try {\n      data = await res.json();\n    } catch (err) {\n      data = [];\n    }\n    if (HTTP_SUCCESS_STATUSES.includes(res.status)) {\n      return Promise.resolve({ status: res.status, data });\n    } else if (HTTP_ERROR_STATUSES.includes(res.status)) {\n      const error = new Error(data.message || \"Internal Server Error\");\n      error.status = res.status;\n      return Promise.reject(error);\n    } else {\n      throw new Error(\"Network response was not ok\");\n    }\n  }\n}\n\nexport { HttpRequest };\n"]},"metadata":{},"sourceType":"module"}