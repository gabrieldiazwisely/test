{"ast":null,"code":"var _jsxFileName = \"/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Notifications from 'react-notification-system-redux';\nimport PropTypes from 'prop-types';\nimport { notificationActions } from '../redux/actions';\nimport { Container, Box } from '@material-ui/core';\nimport { Sidebar } from '../components';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const _this$props = this.props,\n          user = _this$props.user,\n          history = _this$props.history,\n          dispatch = _this$props.dispatch;\n    const pathname = history.location.pathname;\n    console.debug('[CApp] fn=constructor, window.location.pathname=', pathname);\n\n    if (user.isAuthed) {\n      if (pathname === '/signin' || pathname === '/register') {\n        if (pathname !== '/') history.replace('/');\n      } //else {\n      //history.replace('/dashboard')\n      //}\n\n    } else {\n      if (pathname !== '/signin') history.replace('/signin');\n    }\n\n    history.listen(() => {\n      // clear notifications on location change\n      dispatch(notificationActions.clear());\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const locationChanged = nextProps.location !== this.props.location;\n    console.debug(\"[CApp] fn=shouldComponentUpdate, locationChanged=\".concat(locationChanged, \", nextProps.location=\").concat(nextProps.location.pathname, \", this.props.location=\").concat(this.props.location.pathname));\n    return locationChanged || nextProps.notifications.length !== this.props.notifications.length;\n  }\n\n  render() {\n    console.debug('[CApp] fn=render');\n    const _this$props2 = this.props,\n          notifications = _this$props2.notifications,\n          user = _this$props2.user;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, user.isAuthed && /*#__PURE__*/React.createElement(Sidebar, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(Notifications, {\n      notifications: notifications,\n      className: \"notifications-lb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      maxWidth: \"xl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      pt: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, this.props.children)));\n  }\n\n}\n\nApp.propTypes = {\n  user: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired,\n  notifications: PropTypes.array.isRequired,\n  children: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  const notifications = state.notifications,\n        user = state.user;\n  return {\n    notifications,\n    user\n  };\n}\n\nconst connected = withRouter(connect(mapStateToProps)(App));\nexport { connected as App };","map":{"version":3,"sources":["/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/containers/App.js"],"names":["React","Component","connect","withRouter","Notifications","PropTypes","notificationActions","Container","Box","Sidebar","App","constructor","props","user","history","dispatch","pathname","location","console","debug","isAuthed","replace","listen","clear","shouldComponentUpdate","nextProps","locationChanged","notifications","length","render","children","propTypes","object","isRequired","func","array","mapStateToProps","state","connected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Notifications from 'react-notification-system-redux'\nimport PropTypes from 'prop-types'\n\nimport { notificationActions } from '../redux/actions'\n\nimport { Container, Box } from '@material-ui/core'\n\nimport { Sidebar } from '../components'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    const { user, history, dispatch } = this.props\n\n    const pathname = history.location.pathname\n    console.debug('[CApp] fn=constructor, window.location.pathname=', pathname)\n    if (user.isAuthed) {\n      if (pathname === '/signin' || pathname === '/register') {\n        if (pathname !== '/') history.replace('/')\n      } //else {\n      //history.replace('/dashboard')\n      //}\n    } else {\n      if (pathname !== '/signin') history.replace('/signin')\n    }\n\n    history.listen(() => {\n      // clear notifications on location change\n      dispatch(notificationActions.clear())\n    })\n  }\n  shouldComponentUpdate(nextProps) {\n    const locationChanged = nextProps.location !== this.props.location\n    console.debug(\n      `[CApp] fn=shouldComponentUpdate, locationChanged=${locationChanged}, nextProps.location=${nextProps.location.pathname}, this.props.location=${this.props.location.pathname}`\n    )\n    return (\n      locationChanged ||\n      nextProps.notifications.length !== this.props.notifications.length\n    )\n  }\n  render() {\n    console.debug('[CApp] fn=render')\n    const { notifications, user } = this.props\n    return (\n      <React.Fragment>\n        {user.isAuthed && <Sidebar {...this.props} />}\n        <Notifications\n          notifications={notifications}\n          className='notifications-lb'\n        />\n        <Container maxWidth='xl'>\n          <Box pt={8}>{this.props.children}</Box>\n        </Container>\n      </React.Fragment>\n    )\n  }\n}\n\nApp.propTypes = {\n  user: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired,\n  notifications: PropTypes.array.isRequired,\n  children: PropTypes.object.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { notifications, user } = state\n  return { notifications, user }\n}\n\nconst connected = withRouter(connect(mapStateToProps)(App))\nexport { connected as App }\n"]},"metadata":{},"sourceType":"module"}