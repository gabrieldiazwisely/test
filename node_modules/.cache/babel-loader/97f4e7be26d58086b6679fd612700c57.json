{"ast":null,"code":"import { storageConstants } from '../constants';\nexport const auth = {\n  getHeader,\n  isLogin,\n  getLoggedUser\n}; // return Authorization header with JWT\n\nfunction getHeader() {\n  const user = getLoggedUser();\n  return user && user.token ? {\n    'Content-Type': 'application/json',\n    Authorization: \"Bearer \".concat(user.token)\n  } : {};\n}\n\nfunction isLogin() {\n  const user = getLoggedUser(); // TODO validate token with backend service\n  // TODO if token expired delete token from localstorage\n\n  return user && user.token && user.exp > Math.floor(new Date().getTime() / 1000);\n}\n\nfunction getLoggedUser() {\n  return JSON.parse(localStorage.getItem(storageConstants.LOGGED_USER));\n}","map":{"version":3,"sources":["/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/helpers/auth.js"],"names":["storageConstants","auth","getHeader","isLogin","getLoggedUser","user","token","Authorization","exp","Math","floor","Date","getTime","JSON","parse","localStorage","getItem","LOGGED_USER"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,IAAI,GAAG;AAClBC,EAAAA,SADkB;AAElBC,EAAAA,OAFkB;AAGlBC,EAAAA;AAHkB,CAAb,C,CAMP;;AACA,SAASF,SAAT,GAAqB;AACnB,QAAMG,IAAI,GAAGD,aAAa,EAA1B;AACA,SAAOC,IAAI,IAAIA,IAAI,CAACC,KAAb,GACH;AACE,oBAAgB,kBADlB;AAEEC,IAAAA,aAAa,mBAAYF,IAAI,CAACC,KAAjB;AAFf,GADG,GAKH,EALJ;AAMD;;AAED,SAASH,OAAT,GAAmB;AACjB,QAAME,IAAI,GAAGD,aAAa,EAA1B,CADiB,CAEjB;AACA;;AACA,SACEC,IAAI,IAAIA,IAAI,CAACC,KAAb,IAAsBD,IAAI,CAACG,GAAL,GAAWC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CADnC;AAGD;;AAED,SAASR,aAAT,GAAyB;AACvB,SAAOS,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBhB,gBAAgB,CAACiB,WAAtC,CAAX,CAAP;AACD","sourcesContent":["import { storageConstants } from '../constants'\n\nexport const auth = {\n  getHeader,\n  isLogin,\n  getLoggedUser\n}\n\n// return Authorization header with JWT\nfunction getHeader() {\n  const user = getLoggedUser()\n  return user && user.token\n    ? {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${user.token}`\n      }\n    : {}\n}\n\nfunction isLogin() {\n  const user = getLoggedUser()\n  // TODO validate token with backend service\n  // TODO if token expired delete token from localstorage\n  return (\n    user && user.token && user.exp > Math.floor(new Date().getTime() / 1000)\n  )\n}\n\nfunction getLoggedUser() {\n  return JSON.parse(localStorage.getItem(storageConstants.LOGGED_USER))\n}\n"]},"metadata":{},"sourceType":"module"}