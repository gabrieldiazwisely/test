{"ast":null,"code":"import _regeneratorRuntime from \"/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport jwtDecode from 'jwt-decode';\nimport { replace } from 'connected-react-router';\nimport { userConstants } from '../constants';\nimport { storageConstants } from '../../constants';\nimport { userService } from '../../services';\nimport { notificationActions } from './';\nexport const userActions = {\n  signup,\n  signin,\n  signout\n};\n\nfunction signup(payload) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return userService.signup(payload);\n\n          case 3:\n            res = _context.sent;\n\n            if (!(res && res.result === 201)) {\n              _context.next = 8;\n              break;\n            }\n\n            dispatch(replace('/signin'));\n            _context.next = 9;\n            break;\n\n          case 8:\n            throw new Error(res.message || 'Internal Server Error');\n\n          case 9:\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(notificationActions.error({\n              message: _context.t0.message\n            }));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nfunction signin(username, password) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", userService.signin(username, password).then(res => {\n              debugger; // signin successful if there's a jwt token in the response\n\n              if (res && res.data && res.data.token) {\n                const _jwtDecode = jwtDecode(res.data.token),\n                      username = _jwtDecode.username,\n                      exp = _jwtDecode.exp,\n                      _jwtDecode$role = _jwtDecode.role,\n                      role = _jwtDecode$role === void 0 ? 'user' : _jwtDecode$role; // const user = {\n                //   username: username,\n                //   exp: exp,\n                //   role: role,\n                //   token: res.data.token\n                // }\n\n\n                debugger;\n                const user = {\n                  username: 'cesar',\n                  exp: 30,\n                  role: role,\n                  token: 'cesar'\n                }; // store user details and jwt token in local storage to keep user\n                // logged in between page refreshes\n\n                localStorage.setItem(storageConstants.LOGGED_USER, JSON.stringify(user));\n                dispatch(success(user));\n                dispatch(replace('/dashboard'));\n                return;\n              } else {\n                throw new Error(res.message || 'Internal Server Error');\n              }\n            }, error => {\n              console.log(error);\n              dispatch(failure(error.message));\n              dispatch(notificationActions.error({\n                message: error.message\n              }));\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function success(user) {\n    return {\n      type: userConstants.SIGNIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.SIGNIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction signout() {\n  return dispatch => {\n    try {\n      // remove user from local storage to log user out\n      localStorage.clear();\n      dispatch(success());\n      dispatch(replace('/signin'));\n    } catch (err) {\n      console.debug(\"[USER_ACTION] fn=signout, err=\".concat(err));\n    }\n  };\n\n  function success() {\n    return {\n      type: userConstants.SIGNOUT_SUCCESS\n    };\n  }\n}","map":{"version":3,"sources":["/home/crowdark/Dev/REACT/crushingAPP/crushing-app-frontend/src/redux/actions/userActions.js"],"names":["jwtDecode","replace","userConstants","storageConstants","userService","notificationActions","userActions","signup","signin","signout","payload","dispatch","res","result","Error","message","error","username","password","then","data","token","exp","role","user","localStorage","setItem","LOGGED_USER","JSON","stringify","success","console","log","failure","type","SIGNIN_SUCCESS","SIGNIN_FAILURE","clear","err","debug","SIGNOUT_SUCCESS"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,mBAAT,QAAoC,IAApC;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MADyB;AAEzBC,EAAAA,MAFyB;AAGzBC,EAAAA;AAHyB,CAApB;;AAMP,SAASF,MAAT,CAAgBG,OAAhB,EAAyB;AACvB;AAAA,wEAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEeP,WAAW,CAACG,MAAZ,CAAmBG,OAAnB,CAFf;;AAAA;AAEGE,YAAAA,GAFH;;AAAA,kBAGCA,GAAG,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAHvB;AAAA;AAAA;AAAA;;AAIDF,YAAAA,QAAQ,CAACV,OAAO,CAAC,SAAD,CAAR,CAAR;AAJC;AAAA;;AAAA;AAAA,kBAMK,IAAIa,KAAJ,CAAUF,GAAG,CAACG,OAAJ,IAAe,uBAAzB,CANL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASHJ,YAAAA,QAAQ,CACNN,mBAAmB,CAACW,KAApB,CAA0B;AACxBD,cAAAA,OAAO,EAAE,YAAIA;AADW,aAA1B,CADM,CAAR;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAgBD;;AAED,SAASP,MAAT,CAAgBS,QAAhB,EAA0BC,QAA1B,EAAoC;AAClC;AAAA,yEAAO,kBAAMP,QAAN;AAAA;AAAA;AAAA;AAAA,8CACEP,WAAW,CAACI,MAAZ,CAAmBS,QAAnB,EAA6BC,QAA7B,EAAuCC,IAAvC,CACLP,GAAG,IAAI;AACL,uBADK,CAEL;;AACA,kBAAIA,GAAG,IAAIA,GAAG,CAACQ,IAAX,IAAmBR,GAAG,CAACQ,IAAJ,CAASC,KAAhC,EAAuC;AAAA,mCACIrB,SAAS,CAACY,GAAG,CAACQ,IAAJ,CAASC,KAAV,CADb;AAAA,sBAC7BJ,QAD6B,cAC7BA,QAD6B;AAAA,sBACnBK,GADmB,cACnBA,GADmB;AAAA,mDACdC,IADc;AAAA,sBACdA,IADc,gCACP,MADO,oBAErC;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,sBAAMC,IAAI,GAAG;AACXP,kBAAAA,QAAQ,EAAE,OADC;AAEXK,kBAAAA,GAAG,EAAE,EAFM;AAGXC,kBAAAA,IAAI,EAAEA,IAHK;AAIXF,kBAAAA,KAAK,EAAE;AAJI,iBAAb,CATqC,CAerC;AACA;;AACAI,gBAAAA,YAAY,CAACC,OAAb,CACEvB,gBAAgB,CAACwB,WADnB,EAEEC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAFF;AAIAb,gBAAAA,QAAQ,CAACmB,OAAO,CAACN,IAAD,CAAR,CAAR;AACAb,gBAAAA,QAAQ,CAACV,OAAO,CAAC,YAAD,CAAR,CAAR;AACA;AACD,eAxBD,MAwBO;AACL,sBAAM,IAAIa,KAAJ,CAAUF,GAAG,CAACG,OAAJ,IAAe,uBAAzB,CAAN;AACD;AACF,aA/BI,EAgCLC,KAAK,IAAI;AACPe,cAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACAL,cAAAA,QAAQ,CAACsB,OAAO,CAACjB,KAAK,CAACD,OAAP,CAAR,CAAR;AACAJ,cAAAA,QAAQ,CACNN,mBAAmB,CAACW,KAApB,CAA0B;AACxBD,gBAAAA,OAAO,EAAEC,KAAK,CAACD;AADS,eAA1B,CADM,CAAR;AAKD,aAxCI,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;;AA6CA,WAASe,OAAT,CAAiBN,IAAjB,EAAuB;AACrB,WAAO;AACLU,MAAAA,IAAI,EAAEhC,aAAa,CAACiC,cADf;AAELX,MAAAA;AAFK,KAAP;AAID;;AAED,WAASS,OAAT,CAAiBjB,KAAjB,EAAwB;AACtB,WAAO;AACLkB,MAAAA,IAAI,EAAEhC,aAAa,CAACkC,cADf;AAELpB,MAAAA;AAFK,KAAP;AAID;AACF;;AAED,SAASP,OAAT,GAAmB;AACjB,SAAOE,QAAQ,IAAI;AACjB,QAAI;AACF;AACAc,MAAAA,YAAY,CAACY,KAAb;AACA1B,MAAAA,QAAQ,CAACmB,OAAO,EAAR,CAAR;AACAnB,MAAAA,QAAQ,CAACV,OAAO,CAAC,SAAD,CAAR,CAAR;AACD,KALD,CAKE,OAAOqC,GAAP,EAAY;AACZP,MAAAA,OAAO,CAACQ,KAAR,yCAA+CD,GAA/C;AACD;AACF,GATD;;AAWA,WAASR,OAAT,GAAmB;AACjB,WAAO;AACLI,MAAAA,IAAI,EAAEhC,aAAa,CAACsC;AADf,KAAP;AAGD;AACF","sourcesContent":["import jwtDecode from 'jwt-decode'\nimport { replace } from 'connected-react-router'\n\nimport { userConstants } from '../constants'\nimport { storageConstants } from '../../constants'\nimport { userService } from '../../services'\nimport { notificationActions } from './'\n\nexport const userActions = {\n  signup,\n  signin,\n  signout\n}\n\nfunction signup(payload) {\n  return async dispatch => {\n    try {\n      const res = await userService.signup(payload)\n      if (res && res.result === 201) {\n        dispatch(replace('/signin'))\n      } else {\n        throw new Error(res.message || 'Internal Server Error')\n      }\n    } catch (err) {\n      dispatch(\n        notificationActions.error({\n          message: err.message\n        })\n      )\n    }\n  }\n}\n\nfunction signin(username, password) {\n  return async dispatch => {\n    return userService.signin(username, password).then(\n      res => {\n        debugger\n        // signin successful if there's a jwt token in the response\n        if (res && res.data && res.data.token) {\n          const { username, exp, role = 'user' } = jwtDecode(res.data.token)\n          // const user = {\n          //   username: username,\n          //   exp: exp,\n          //   role: role,\n          //   token: res.data.token\n          // }\n          debugger\n          const user = {\n            username: 'cesar',\n            exp: 30,\n            role: role,\n            token: 'cesar'\n          }\n          // store user details and jwt token in local storage to keep user\n          // logged in between page refreshes\n          localStorage.setItem(\n            storageConstants.LOGGED_USER,\n            JSON.stringify(user)\n          )\n          dispatch(success(user))\n          dispatch(replace('/dashboard'))\n          return\n        } else {\n          throw new Error(res.message || 'Internal Server Error')\n        }\n      },\n      error => {\n        console.log(error)\n        dispatch(failure(error.message))\n        dispatch(\n          notificationActions.error({\n            message: error.message\n          })\n        )\n      }\n    )\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.SIGNIN_SUCCESS,\n      user\n    }\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.SIGNIN_FAILURE,\n      error\n    }\n  }\n}\n\nfunction signout() {\n  return dispatch => {\n    try {\n      // remove user from local storage to log user out\n      localStorage.clear()\n      dispatch(success())\n      dispatch(replace('/signin'))\n    } catch (err) {\n      console.debug(`[USER_ACTION] fn=signout, err=${err}`)\n    }\n  }\n\n  function success() {\n    return {\n      type: userConstants.SIGNOUT_SUCCESS\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}